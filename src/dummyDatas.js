const dummyDatas = [
  {
    _id: '621c377733f8394b8921c1f0',
    imgUrl: '../images/kislev.jpg',
    title: '키슬레프 (Feat. 차리나 카타린 보카)',
    text: '<p><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">현 키슬레프의 차리나(여자 차르)이자 얼음 학파의 대가. 가장 강력한 얼음 마녀이지만, 마법의 영향으로 살도 차갑고 창백하다고 한다.</span></p><p><br class="ProseMirror-trailingBreak"></p><p><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">그래서 키슬레프의 시조, 칸-여왕 </span><a href="https://namu.wiki/w/%EB%AF%B8%EC%8A%A4%EC%B9%B4">미스카</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">의 환생이라는 말도 돈다고 한다. 웅골족들마저도 고대 혈통의 힘을 계승받은 그녀를 두려워하고 존중한다.</span></p><p><br class="ProseMirror-trailingBreak"></p><p><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">과거 아버지가 실종되었을 때 차리나로 등극할 뻔 했었다.</span>&nbsp;<span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">이후 아버지의 치세동안 얼음 학파의 마법을 익혀 마법사가 된다. 제국력 2517년 아버지 </span><a href="https://namu.wiki/w/%EB%B3%B4%EB%A6%AC%EC%8A%A4%20%EB%B3%B4%EC%B9%B4">보리스 보카</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">가 트롤 지방에서 </span><a href="https://namu.wiki/w/%EC%BF%A0%EB%A5%B4%EA%B0%84(Warhammer)">쿠르간</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">족과의 교전에서 전사하자 여왕의 자리에 즉위하게 된다. 뛰어난 지도자이자 강력한 마법사인데 즉위했을 때 얼음 마법으로 800미터정도 길이의 거대한 얼음 궁전을 만들어냈다. 그녀는 여기서 사람들을 접견하면서 자신의 힘을 과시한다.</span></p><p><br class="ProseMirror-trailingBreak"></p><p><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">아버지 </span><a href="https://namu.wiki/w/%EB%B3%B4%EB%A6%AC%EC%8A%A4%20%EB%B3%B4%EC%B9%B4">보리스 보카</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">가 직접 뛰어야 성이 차는 스타일이었다면, 카타린은 냉담하고 거리를 두는 식의 통치를 하고 있어 전장에는 주로 그녀의 대리인이나 장군을 보낸다. 허나 가끔씩 그녀 자신이 전장에 나설 때도 있으며 그럴때면 강력한 힘을 발휘한다.</span></p><p><br class="ProseMirror-trailingBreak"></p><p><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">즉위한 뒤 </span><a href="https://namu.wiki/w/%EA%B7%B8%EB%A6%BC%EA%B3%A0%EB%A5%B4%20%EC%95%84%EC%9D%B4%EC%96%B8%ED%95%98%EC%9D%B4%EB%93%9C">그림고르 아이언하이드</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">가 키슬레프를 침공하자 그림고르의 군대에 눈폭풍을 쏟아부어 그림고르의 군대가 키슬레프의 군대로 진격하지 못하게 막는 활약을 벌였다. 내정에서는 고스포다르인만 될 수 있는 보야르 직을 웅골인들한테도 수여하려다 실패했다. 드루지나라는 말단 귀족직위를 공적을 세우거나 그녀에게 충성하는 평민들에게 수여하고 있는 중. 또한 독립적으로 행동하는 그리폰 리전들을 직속으로 삼고자 해서 군단의 수장 </span><a href="https://namu.wiki/w/%ED%86%A0%EB%A5%B4%EB%94%94%EB%AF%B8%EB%A5%B4%20%EB%A3%A8%EB%B3%B4%EB%B0%94%EC%8B%A0">토르디미르 루보바신</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">과 대립관계인 것으로 묘사된다.</span></p><p><br class="ProseMirror-trailingBreak"></p><p><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">그러나 그녀는 최근 나라에 대한 큰 걱정에 시달리고 있다. </span><a href="https://namu.wiki/w/%EB%85%B8%EC%8A%A4%EC%B9%B4">캬자크</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span"> 약탈자들과 </span><a href="https://namu.wiki/w/%EC%BF%A0%EB%A5%B4%EA%B0%84(Warhammer)">쿠르간</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">들의 습격이 갈수록 잦아지고 그들의 수 역시 늘어나고 있어, </span><a href="https://namu.wiki/w/%EC%A0%9C%EA%B5%AD(Warhammer)">제국</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">이 여러번 지원군을 보냈을 정도였다. 제국 학자 안스프라흐트는 이 유혈과 공포의 시기를 </span><strong>봄철 대이동(Spring Driving)</strong><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">라 이름 붙였다.</span></p><p><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">카타린과 그녀의 보야르들은 최선을 다해 싸웠으나 북부인들은 계속해서 밀려왔고 이미 여러 초이카(Choika), 제데브카 (Zhedevka)와 같은 스타니스타(Stanista; 관할구)들이 잿더미로 변했다. 전쟁은 끝이 날 일이 없어보였다...</span></p><p><br class="ProseMirror-trailingBreak"></p><p><img style="width:100%" src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646654086/myportfolioblogproject/ib4zlcokwzdflkc1wzta.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h5><strong><em><span style="color: #005cff" data-raw-html="span">"모두 내가 후계자를 낳지 않았다는 걸 알것이다. 하지만 오늘 내 모든 아들들과 딸들이 나와 여기 함께 있다. 비에 젖은 이 언덕 위에서 우리는 모두 하나의 민족이며, 하나의 대지이다. 오늘 우리는 키슬레프를 위해 싸운다! 오늘 우리는 키슬레프가 잃어버린 아들들과 딸들, 키슬레프의 자랑스러운 어머니들과 아버지들을 위해 싸운다! 키슬레프는 백성이고, 백성이 키슬레프다!"</span></em></strong></h5><h4><strong><em><span style="color: #005cff" data-raw-html="span">-차리나 카타린</span></em></strong></h4><p><br class="ProseMirror-trailingBreak"></p><p><span data-raw-html="span" style="color: rgb(55, 58, 60); font-family: \'Open Sans\', arial, \'Apple SD Gothic Neo\', \'Noto Sans CJK KR\', 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, \'Malgun Gothic\', sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">엔드 타임에서 카오스 군대와 맞서 싸웠으나 중과부적으로 패했고, 키슬레프 대도시들을 포함한 지역 대부분이 카오스의 군대에게 함락당하는 결과를 가져온다.</span> <span data-raw-html="span" style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">카타린은 생존자들을 이끌었으나 백성, 대지, 신들을 모두 잃고 절망하면서 전의를 상실해버렸다. 그녀는 스스로를 자책하며 군사들로부터 혼자 떨어져 나왔다가 그녀에게 찾아온 고아인 </span><a href="https://namu.wiki/w/%EB%AF%B8%EC%8A%A4%EC%B9%B4">미스카</a><span style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;" data-raw-html="span">와 친해지게 된다. 그녀와 대화를 하면서 키슬레프의 수호를 진짜 실패하는 것은 그들이 시도도 하지 않을 때이며, 키슬레프의 진정한 힘은 대지가 아니라 국민에게서 온다는 사실을 깨닫고 기운을 차리게 된다.</span></p><p><span data-raw-html="span" style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">이후 난민들을 규합한다음 그들과 함께 에렌그라드로 향한다. 여기서 그녀를 꿈에서 보았다면서 찾아온 제국 상선의 도움을 받게 되었다.</span>&nbsp;<span data-raw-html="span" style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">제국의 선박에 꼬마 미스카를 포함한 난민들을 피신시켰으나 그의 아버지의 원수인 </span><a href="https://namu.wiki/w/%EC%BF%A0%EB%A5%B4%EA%B0%84(Warhammer)">쿠르간</a><span data-raw-html="span" style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;"> 족장 헷자르 페이다즈 (Hetzar Feydaj)가 </span><a href="https://namu.wiki/w/%EB%B9%84%EC%8A%A4%ED%8A%B8%EB%A7%A8">비스트맨</a><span data-raw-html="span" style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">을 이끌고 그녀를 추격해왔다.</span></p><p><br class="ProseMirror-trailingBreak"></p><p><span data-raw-html="span" style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">그녀는 차리나와 키슬레프의 대지는 하나이므로 같은 운명을 향유해야 한다면서 제국 기사의 필사적인 망명 제안을 거부한다. 이후 그녀와 함께 남은 충성스런 1천명의 병력들과 함께</span>&nbsp;<span data-raw-html="span" style="color: rgb(55, 58, 60); font-family: Open Sans, arial, Apple SD Gothic Neo, Noto Sans CJK KR, 본고딕, KoPubDotum, 나눔바른고딕, 나눔고딕, NanumGothic, 맑은고딕, Malgun Gothic, sans-serif; font-size: 14.4px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">최후의 돌격을 감행한 후 자신이 불러일으킨 눈보라 속에서 실종되었다. 그러나 그녀의 힘은 계속 남아있었는지 에렌그라드를 둘러싼 눈폭풍우는 세상 끝날까지 멈추지 않았다고 한다. 이후 그녀의 죽음은 보고되지 않았기에 전사 여부는 의문이지만 대체로 죽었다고 보는 분위기.</span></p>',
    catName: 'Game',
    author: 'lse126',
    createdAt: '2022-02-28T02:46:15.385Z',
    updatedAt: '2022-03-07T11:55:08.860Z',
    __v: 0,
  },
  {
    _id: '6226de45c25c6b3bca00032d',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646714523/myportfolioblogproject/gxje1buoduhfqmxza0rh.jpg',
    title: 'VSCode 설치 및 익스텐션 설정',
    text: '<h4><strong><em>1. Visual Studio Code</em></strong></h4><h4><br class="ProseMirror-trailingBreak"></h4><h4><strong>2. Material Theme</strong></h4><h4><br class="ProseMirror-trailingBreak"></h4><h4><strong>3. Material Icon Theme</strong></h4><p><br class="ProseMirror-trailingBreak"></p><h4><strong>4. Prettier - Code formatter</strong></h4><p>settings 창에서 Format On Save 활성화 prettier setting 창에서 Tab Width 2로 세팅 setting 창에서 prettier quote에서 single quote 사용 설정 setting 창에서 quote 검색해서 typescript, javascript single quote 사용 설정</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em>5. Bracket Pair Colorizer</em></strong></h4><p>괄호에 색감을 주어서 코드의 가독성을 높이는 것</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em>6. Indent - rainbow</em></strong></h4><p>들여쓰기 한 부분이 무지개 빛이 나게하여 코드의 가독성을 높여주는 익스텐션.</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em>7. Auto Rename Tag</em></strong></h4><p>태그 변경시 뒷부분은 자동으로 변경되게끔 해주는 익스텐션</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em>8. CSS Peek</em></strong></h4><p>HTML 내의 클래스 이름을 Ctrl 키를 누르면서 클릭을 하게 되면 css 자동으로 찾아주는 익스텐션</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em>9. HTML CSS Support</em></strong></h4><p>똑같은 클래스 이름이나 함수명을 타입할 때 일일이 다 적어주는 귀찮음을 해소해주는 익스텐션</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em>10. Live Server</em></strong></h4><p>코드를 수정하고 수동적으로 브라우저에서 새로고침을 눌러서 확인하는 귀찮음을 해소해주는 익스텐션</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em>11. Markdown preview</em></strong></h4><p>VSCode에 이미 내장이 되어있는 익스텐션 Readme.md 파일 작성하면서 실시간으로 작성된거 확인 가능함</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em>12. Comment Color Customizations</em></strong></h4><p><br class="ProseMirror-trailingBreak"></p><p>VSCode settings 에 접속하여 settings.json에서</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><div data-language="text" class="toastui-editor-ww-code-block"><pre><code data-language="text">"editor.tokenColorCustomizations": { "comments": "#d4ffd0" }</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>다음과 같이 추가!</p>',
    catName: 'HTML',
    author: 'lse126',
    createdAt: '2022-03-08T04:40:37.361Z',
    updatedAt: '2022-03-08T05:14:49.965Z',
    __v: 0,
  },
  {
    _id: '6227b1ef70e999964e51b7d2',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646766731/myportfolioblogproject/otqkiz0aaah7jj94n5ov.jpg',
    title: '깃 설치 및 깃 허브 설정',
    text: '<p>📌Git 다운로드 바로가기 : https://git-scm.com/download/</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774325/myportfolioblogproject/iforqv2vyf5fboaaxttq.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774362/myportfolioblogproject/qqtvr5schv5zhkvf54tl.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌 Additional iconsOn the Desktop : 바탕화면에 바로가기 생성</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Windows Explorer integration</p><p>✅Git Bash Here : 폴더 오른쪽 클릭 메뉴에 Git Bash Here(연결 기능) 추가</p><p>✅Git GUI Here : 폴더 오른쪽 클릭 메뉴에 Git GUI Here(연결 기능) 추가</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Git LFS (Large File Support)대용량 파일 지원</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Associate .git* configuration files with the defalut text editor기본 텍스트 에디터에 git 구성(.git 확장자) 연결</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Associate .sh files to be run with BashBash에 .sh 확장자 파일 연결</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 Check daily for git for Windows updates매일 새로운 업데이트 확인</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 (NEW!) Add a Git Bash Profile to Windows Terminal</p><p><br class="ProseMirror-trailingBreak"></p><p>윈도우 기본 터미널에 Git Bash 프로파일 추가</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774540/myportfolioblogproject/hvzre516edhpg58egu0r.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Let Git decide : 새로운 Repository의 initial branch에 기본 분기 이름("master")을 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 Override the default branch name for new repositories : 새로운 Repository의 initial branch에 사용자 지정 분기 이름을 사용합니다. 이미 팀에서 관용적으로 쓰는 명칭이 있을 때 사용하면 됩니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774603/myportfolioblogproject/rnbiehjgbwdf5j2fs24j.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use Git from Git Bash only : Git Bash에서만 Git 명령어를 수행할 수 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Git from the command line and also from 3rd-party software : Git을 환경변수(PATH)에 추가하여 윈도우 기본 명령 프롬프트(CMD) 등에서도 Git 명령어를 수행할 수 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use Git and optional Unix tools from the Command Prompt : Git과 Unix 도구 모두 환경변수(PATH)에 추가합니다. 이 경우 몇 가지 Windows 기본 도구가 새롭게 재정의 됩니다. 이러한 위험을 충분히 숙지하고 있는 경우에만 이 옵션을 사용하기를 권장합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774637/myportfolioblogproject/ys7filfnpzbkziwjjpmh.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Use bundled OpenSSH : Git에서 기본으로 제공되는 OpenSSH를 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use external OpenSSH : 외부 OpenSSH를 사용합니다. 이 경우 Git에서 기본 제공하는 OpenSSH는 따로 설치되지 않으며 PATH에 명시된 OpenSSH를 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774649/myportfolioblogproject/g1iozo93gt5snqhhesui.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Use the OpenSSL library : OpenSSL 라이브러리를 사용합니다. ca-bundle.crt 파일로 검증합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use the native Windows Secure Channel library : Windows 인증서 저장소를 사용하여 검증합니다. 이 옵션은 Active Directory 도메인 서비스를 통한 회사의 내부 Root CA 인증서를 사용할 수 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774677/myportfolioblogproject/fjubdqal3de5xmi9nhvd.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Checkout Windows-style, commit Unix-style line endings : 체크아웃은 윈도우 스타일, 커밋은 유닉스 스타일로 자동 변경되도록 설정합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Checkout as-is, commit Unix-style line endings : 체크아웃은 변경 없이, 커밋은 유닉스 스타일로 설정합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Checkout as-is, commit as-is : 체크아웃, 커밋 모두 스타일 변경 없이 진행합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774695/myportfolioblogproject/wetutqcnny3nskpdnpul.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Use MinTTY (the default terminal of MSYS2) : Git Bash 기본 터미널 에뮬레이터(MinTTY)를 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use Windows\' default console window : 윈도우 기본 콘솔(cmd)을 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774709/myportfolioblogproject/kqbyicqqcra1nxjp3rdy.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Default (fase-forward or merge) : \'git pull\'의 수행 동작을 기본으로 설정합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Rebase : \'git pull\'의 수행 동작으로 현재 분기를 불러온 분기에 재배치합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Only ever fase-forward : \'git pull\'의 수행 동작으로 불러온 분기로 빠르게 넘어갑니다. 명령어 수행에 실패할 가능성이 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774725/myportfolioblogproject/dxgjy0xil8lfawk92oi8.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Git Credential Manager Core : Git의 자격 증명 도우미를 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌None : 자격 증명 도우미를 사용하지 않습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774744/myportfolioblogproject/tssgjz0isb5c73sryynf.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Enable file system caching : 파일 시스템 캐싱을 활성화하여 상당한 성능 향상을 제공합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Enable symbolic links : 심볼릭 링크를 활성화합니다. (SeCreateSymbolicLink 권한이 필요합니다.) 기존 리포지토리에는 이 설정이 적용되지 않습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774763/myportfolioblogproject/nh1pt4zphbp0u8f07bca.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌Enable experimental support for pseudo consoles : winpty를 사용하지 않고 Git Bash에서 Node나 Python과 같은 콘솔을 실행할 수 있게 합니다. 그러나 몇 가지 버그가 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Enable experimental built-in file system monitor : \'git status\', \'git commit\' 등과 같은 명령어 실행 속도를 높이기 위해 built-in file system monitor를 자동으로 실행합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Git Bash를 실행해줍니다.</p><div data-language="text" class="toastui-editor-ww-code-block"><pre><code>git config --global user.name "사용자이름" git config --global user.email "이메일@abc.com"</code></pre></div><p>📌사용자 이름/이메일 등록을 진행합니다.</p><p>📌 등록된 사용자를 확인합니다.</p><div data-language="text" class="toastui-editor-ww-code-block"><pre><code>git config --list</code></pre></div>',
    catName: 'HTML',
    author: 'lse126',
    createdAt: '2022-03-08T19:43:43.789Z',
    updatedAt: '2022-03-08T21:26:28.058Z',
    __v: 0,
  },
  {
    _id: '6227dd03d46c3b43fd80cabc',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646779647/myportfolioblogproject/fkioxf49osh0chqg8c4n.jpg',
    title: '리액트 설정 및 필요한 툴, 익스텐션',
    text: '<h3>1. cmder 설치</h3><p><strong>git 사용할 수 있게 full version으로 설치하기</strong></p><h6><strong><em>https://cmder.net/</em></strong></h6><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3>2. node, npm 설치</h3><p><strong>node -v, npm -v 으로 설치 확인하기</strong></p><h6><strong><em>https://nodejs.org/ko/</em></strong></h6><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3>3. yarn도 npm 통해서 설치하기</h3><h6><strong><em>npm install yarn --global</em></strong></h6><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3>4. 리액트 프로젝트 생성</h3><h6><strong><em>https://create-react-app.dev/docs/getting-started</em></strong></h6><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3>5. 리액트 developer tools 설치</h3><h6><strong>https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=ko</strong></h6><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3>7. Reactjs code snippets 익스텐션 설치</h3><h6>rsi, rcc 등등의 snippets들을 통해서 리액트 기본 코드 수동적으로 작성할 필요없이 자동으로 작성되는 코드 익스텐션!</h6><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3>8. Auto Import 익스텐션 설치</h3><h6>import 할때 리액트 컴포넌트를 import 할때 수동이 아닌 자동적으로 import 코드 작성해주는 익스텐션!</h6><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3>9. React Emmet 설정</h3><h6>순서 -&gt; 기본 설정 -&gt; 설정 -&gt; \'emmet\' 검색 -&gt;  settings.json  -&gt;  코드 설정</h6><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><div data-language="js" class="toastui-editor-ww-code-block"><pre><code data-language="js"> "emmet.includeLanguages": {"javascript":"javascriptreact"}</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p>',
    catName: 'React',
    author: 'lse126',
    createdAt: '2022-03-08T22:47:31.078Z',
    updatedAt: '2022-03-08T23:38:26.961Z',
    __v: 0,
  },
  {
    _id: '6227e289d46c3b43fd80cac7',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646781055/myportfolioblogproject/b4nj0wkivfsg6c7ebyza.jpg',
    title: 'NodeJS 기본 개발 설정 및 익스텐션',
    text: '<h3><strong>1. postsman 설치</strong></h3><p><br class="ProseMirror-trailingBreak"></p><p>백엔드 APIs request, response 설계시 유용하게 사용가능한 프로그램!!</p><h5>https://www.postman.com/downloads/</h5><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3><strong>2. nodemon설치</strong></h3><p><br class="ProseMirror-trailingBreak"></p><p>백엔드 코드 변화에 따라 실시간으로 (자동으로) 업데이트 및 확인 가능</p><h5>npm install nodemon --save-dev</h5><p><br class="ProseMirror-trailingBreak"></p><p>환경변수 관련 에러가 난다면</p><h5>npm install nodemon --global</h5><p><br class="ProseMirror-trailingBreak"></p><p>develope dependency로 추가해줘서 설치!</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><div data-language="js" class="toastui-editor-ww-code-block"><pre><code data-language="js">"scripts" : { ... "start" : "nodemon app", ... }</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p>script 위와 같이 작성!!</p><p><br class="ProseMirror-trailingBreak"></p><h3><strong>3. Heroku 배포 툴 설치</strong></h3><h5>https://devcenter.heroku.com/articles/heroku-cli</h5><p><br class="ProseMirror-trailingBreak"></p><p>컴퓨터 각 버전에 맞게 설치하기.</p><p><br class="ProseMirror-trailingBreak"></p>',
    catName: 'Node JS',
    author: 'lse126',
    createdAt: '2022-03-08T23:11:05.509Z',
    updatedAt: '2022-03-09T04:32:08.214Z',
    __v: 0,
  },
  {
    _id: '6228648d16045a8efc6ea0ae',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646810893/myportfolioblogproject/muj41nyttton1dgfiauk.jpg',
    title: '깃 원격 저장소와 로컬 저장소 충돌문제(feat. git pull & fetch)',
    text: '<p>만약 팀 내의 다른 팀원이 개발한 내역이 있어 깃의 원격 저장소 작업 코드가 나의 로컬 코드와 다를 때는 내 변경사항 코드를 그대로 깃에 push를 하게되면 위 사진과 같은 에러가 발생한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>이럴 때는 원격저장소의 변경사항과 나의 로컬저장소 간격을 메워주어야 한다.</p><p><br class="ProseMirror-trailingBreak"></p><h3><strong><em>이때 원격저장소의 최신 변경사항으로 맟추어야 내 로컬 변경사항을 업로드할 수 있다. 이를 위한 명령어가 fetch와 pull이다.</em></strong></h3><p><br class="ProseMirror-trailingBreak"></p><blockquote><h5><strong>git fetch : 원격 저장소의 변경사항 (commit) 들을 로컬저장소로 가져온다. (commit 내역을 가져옴)</strong></h5><h5><strong>git pull : 원격 저장소의 변경사항을 가져와 로컬에 병합한다.</strong></h5></blockquote><p><br class="ProseMirror-trailingBreak"></p><p>git pull은 원격 저장소의 변경사항을 가져와 로컬에 병합한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>예를 들면, 나 같은 경우 최근 컴퓨터를 바꾸는 과정 중 개발세팅을 하면서 기존에 쓰던 컴퓨터 안에 저장되어있던 로컬저장소가 깃 원격저장소에 연결되어 있던 상태에서</p><p>새 컴퓨터 로컬 저장소를 git clone ~ 으로 그대로 가지고 온뒤, 코드를 작성하고 git add *, git commit -m "", git push origin ~ 했더니 위와 같은 Error 가 발생을 하였다.</p><p><br class="ProseMirror-trailingBreak"></p><p>뒤늦게 git init, git remote add origin ~ , git pull, git branch -M main, git commit -m "", git push -u origin main 했지만 계속 에러가 발생했다.</p><p>즉, 애초에 기존 원격 저장소와 새 로컬 저장소의 연결 상태를 업데이트 시키지 않은 상태에서 git add *, git commit -m "", git push origin ~ 한 것이 실수 였다.</p><p><br class="ProseMirror-trailingBreak"></p><blockquote><h4><strong>git pull origin main --allow-unrelated-histories</strong></h4></blockquote><p>( 원격 저장소와 로컬 저장소의 병합을 허용한다는 의미임 )</p><p><br class="ProseMirror-trailingBreak"></p><p>이렇게 git pull을 적용하고 다시 push를 했더니 정상적으로 작동이 되었다.</p><p><br class="ProseMirror-trailingBreak"></p><p>이미 생성되어있는 원격 저장소를 새로운 컴퓨터에서 로컬 저장소를 새로 만들어서 생성되어 있던 원격 저장소와 새로운 로컬 저장소 간의 연결 상태를 업데이트 시켜주지 않았기</p><p>때문에 발생했던 문제인 것 같다.</p><p><br class="ProseMirror-trailingBreak"></p><p>그래서 add, commit, push 하기 전에 꼭꼭 git pull을 해서 기존 원격 저장소와 새 로컬 저장소 간의 코드 내용 및 연결 상태 업데이트를 해주어야 에러가 발생하지 않는다.</p><h4><br class="ProseMirror-trailingBreak"></h4><h4><strong>에러가 나지 않기 위한 제대로 된 새 로컬 저장소 - 기존 원격 저장소 연결방법은</strong></h4><p><br class="ProseMirror-trailingBreak"></p><p>1. git init</p><p>2. git remote add origin http ~</p><p>3. git pull</p><p>4. git add *</p><p>5. git commit -m "~"</p><p>6. git push origin main</p><p><br class="ProseMirror-trailingBreak"></p><p>이었던 것 같다.</p><p><br class="ProseMirror-trailingBreak"></p><p>나는 3번을 거치지 않고 바로 add, commit, push 를 하였기 때문에 생긴 에러였던 것 같다.</p><p><br class="ProseMirror-trailingBreak"></p><h3><strong>cf) git clone 과 git pull 의 차이점</strong></h3><p><br class="ProseMirror-trailingBreak"></p><p>git clone과 git pull을 기능상 똑같아 보이지만 명백한 차이점이 존재한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>git clone을 통해서 깃의 원격 저장소 내용을 그대로 가져오면 내가 나의 로컬에서 기존에 작업하던 코드들은 다 사라지고 git clone을 통해서 원격 저장소에서 가져온 코드만</p><p>그대로 복사가 되어진다. (즉, 기존에 내가 로컬에서 작성했던 코드들은 다 날라감!!)</p><p><br class="ProseMirror-trailingBreak"></p><p>반면 git pull은 깃 원격 저장소 코드를 그대로 가지고 옴과 동시에 나의 로컬에서 작성한 코드를 비교해가면서 바뀌지 않은 것은 그대로 두지만</p><p>내가 로컬에서 작업하면서 바뀐 코드 부분만 변경 수정해서 그대로 가지고 온다.</p><p><br class="ProseMirror-trailingBreak"></p><p>앞서 git pull에서 원격 저장소와 로컬 저장소 코드를 병합한다는 의미는 이런 의미인 것이다.</p><p><em>ex) git pull ~ , git pull origin master -&gt; git pull [원격 저장소 이름] [원격 저장소에서 받아오고자 하는 브랜치의 이름]</em></p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em><span data-raw-html="span" style="color: #ff0000">!그래서, git pull 명령은 병합과정도 포함되어져 있기 때문에, pull하기 전에 반드시 commit을 해주어야 한다.!</span></em></strong></h4><p><br class="ProseMirror-trailingBreak"></p><p>pull 하기 전에 commit을 하지 않으면 덮어쓰기 에러가 발생할 수도 있음. 즉, 다시 쉽게 말하면, 협업을 하다 보면 내가 로컬에서 작업하고 있을 때, 같은 팀원이 원격 저장소에</p><p>먼저 변경 사항을 commit하고 push를 하게 되는 상황은 반드시 있다. 그러면 원격 저장소의 업데이트된 내용이 나의 로컬 저장소에는 최신화가 되어있지 않기 때문에</p><p>이럴때 <strong>pull</strong> 아니면 <strong>fetch</strong>를 사용하게 된다.</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em><span data-raw-html="span" style="color: #002eff">!즉, 기존 작업에 대해서 commit을 미리 해두고 pull을 수행해야함!</span></em></strong></h4><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>(향후에 새롭게 알거나 수정되는 사항이 있다면 다시 업데이트 해두도록 하겠다!)</p><p><br class="ProseMirror-trailingBreak"></p><h3><strong>*깃 원격 저장소와 현재 로컬 저장소가 동기화되어 있지 않기 때문에 해결방법도 동기화 시켜주면 됨 (2022년 3월 22일)</strong></h3><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em><span style="color: #002eff" data-raw-html="span">git pull --rebase &lt;원격저장소별칭&gt; master</span></em></strong></h4><p><br class="ProseMirror-trailingBreak"></p><p>채팅 앱 deploy 하는 과정 중에 또 에러가 생겨서 git pull ~ 해줬지만 실패!</p><p>그래서 rebase로 하고 난 뒤 정상적으로 push 실행! 해결!</p><p><br class="ProseMirror-trailingBreak"></p><h2><strong>* git remote ~ git 원격 저장소 설정 및 해제 방법</strong></h2><h6><br class="ProseMirror-trailingBreak"></h6><h3>1. 원격 저장소 로컬 저장소 연결 설정 -&gt; git remote add origin &lt;원격 저장소 url&gt;</h3><h3><br class="ProseMirror-trailingBreak"></h3><h3>2. 로컬에 등록된 원격 저장소 확인 -&gt; git remote -v</h3><h3><br class="ProseMirror-trailingBreak"></h3><h3>3. 로컬에 등록된 원격 저장소 제거 -&gt; git remote remove origin</h3><h3><br class="ProseMirror-trailingBreak"></h3><h3>4. 원격 저장소에서 설정하고 그 관련된 코드 불러올때 -&gt; git pull origin main</h3><h3>(git clone &lt;원격저장소 url&gt; 은 로컬에서 원격 저장소 설정없이 그대로 복사 가능!)</h3>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-03-09T08:25:49.390Z',
    updatedAt: '2022-03-21T15:30:35.629Z',
    __v: 0,
  },
  {
    _id: '622b1d8f5eca9b99054fbb0e',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646992525/myportfolioblogproject/ulvuh8kcsr9xfj250glc.jpg',
    title: 'gitigonore 파일 쉽게 작성해주는 사이트',
    text: '<p><br class="ProseMirror-trailingBreak"></p><p>gitginore 파일 쉽게 작성해주는 사이트</p><p><br class="ProseMirror-trailingBreak"></p><p><a href="https://www.toptal.com/developers/gitignore">gitignore editor site</a></p><p><br class="ProseMirror-trailingBreak"></p><p>사이트에 들어가서 현재 프로젝트에서 사용 중인 개발 환경, 프로그래밍 언어를 입력하면 자동으로 .gitignore파일 내용을 만들어줌.</p><p><br class="ProseMirror-trailingBreak"></p><h3>Feat. gitignore 추가했는데 계속 커밋에 내용이 추가되는 오류</h3><p><br class="ProseMirror-trailingBreak"></p><p>보통 git 캐시 관련된 문제이므로</p><p><br class="ProseMirror-trailingBreak"></p><div data-language="terminal" class="toastui-editor-ww-code-block"><pre><code data-language="terminal">git rm --r cached . \ngit add . \ngit commit -m .</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p>터미널에서 캐시 삭제 후 다시 커밋하면 된다.</p>',
    catName: 'Node JS',
    author: 'lse126',
    createdAt: '2022-03-11T09:59:43.881Z',
    updatedAt: '2022-03-11T13:42:37.730Z',
    __v: 0,
  },
  {
    _id: '62389ae3f0ff8c7697cceb79',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648011186/myportfolioblogproject/v1000filfpnkj3xge13n.jpg',
    title: 'Mixed content 문제 해결',
    text: '<h1>*timeago.js</h1><p><br class="ProseMirror-trailingBreak"></p><h5><em><span data-raw-html="span" style="box-sizing: border-box;">import&nbsp;{&nbsp;format,&nbsp;render,&nbsp;cancel,&nbsp;register&nbsp;}&nbsp;from&nbsp;\'timeago.js\';</span></em></h5><h5><em><span data-raw-html="span" style="box-sizing: border-box;">format(\'2016-06-12\',</span><span data-raw-html="span" style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: monospace, monospace; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;">&nbsp;</span><span data-raw-html="span" style="box-sizing: border-box;">\'en_US\');</span></em></h5><p><br class="ProseMirror-trailingBreak"></p><h1><strong>https 사이트에서 http 사이트 요청 시 발생하는 보안 문제</strong></h1><p><br class="ProseMirror-trailingBreak"></p><p>Chattinb website 를 만들 때, Heroku http ver1.0 으로 배포하고 timeago.js 라이브러리를 사용하였을 때 발생했던 문제였음.</p><p>아래와 같이 meta 데이터 추가하여 해결!</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h2>*Mixed content 에러 발생</h2><h5><br class="ProseMirror-trailingBreak"></h5><h4><em>Mixed Content: The page at \'https://plprice.netlify.app/\' was loaded over HTTPS, but requested an insecure script \'http://api.vworld.kr/</em></h4><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h2>*Mixed content 에러 발생</h2><p><br class="ProseMirror-trailingBreak"></p><h6><strong><em><span data-raw-html="span" style="color: rgb(85, 85, 85); font-family: Spoqa Han Sans, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">-html파일 head에 추가</span></em></strong></h6><h6><br class="ProseMirror-trailingBreak"></h6><h4><strong><em>&lt;meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests"&gt;</em></strong></h4>',
    catName: 'HTML',
    author: 'lse126',
    createdAt: '2022-03-21T15:33:55.724Z',
    updatedAt: '2022-03-23T04:56:09.121Z',
    __v: 0,
  },
  {
    _id: '623aa127e30b40a8d7ff1f19',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648009442/myportfolioblogproject/jfqwxlhmusy8iehw1k9y.jpg',
    title: '프로세스와 쓰레드 개념 정리',
    text: '<p><strong><em>1. 프로세서</em></strong></p><p>운영체제 위에서 연속적으로 실행되고 있는 프로그램을 말함. 각각의 프로그램은 메모리 위에서 서로 독립적으로 실행되고 있음.</p><p>프로세스마다 할당된 메모리, 데이터가 지정되어 있음.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>2. 코드</em></strong></p><p>프로그램을 실행하기 위한 코드</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>3. 스택</em></strong></p><p>함수들이 어떤순서로 실행되어야 하는지에 대한 정보가 저장된 곳.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>4. 힙</em></strong></p><p>오브젝트를 생성하거나 동적으로 할당된 변수를 선언할때 그 데이터가 저장되는 곳</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>5. 스태틱</em></strong></p><p>전역변수나 스태틱 변수가 할당되어 저장되는 곳</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>6. 스레드</em></strong></p><p>프로세스 안에 코드, 데이터, 힙과 같은 공통적인 데이터 리소스는 프로세스에 있다. 그래서 쓰레드는 프로세스에 할당된 공통적인 리소스에 동시 다발적으로 접근하여 정보 업데이트 삭제 가능.</p><p>그래서 서로 공유하면서 사용한다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648009497/myportfolioblogproject/zyii5dsli00k0oep927o.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-03-23T04:25:11.402Z',
    updatedAt: '2022-03-23T04:25:11.402Z',
    __v: 0,
  },
  {
    _id: '623aa660e30b40a8d7ff1f26',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648010683/myportfolioblogproject/kx0xvyvcsqyagdlnewxy.jpg',
    title: '자바스크립트 엔진 동작 환경 및 원리 정리',
    text: '<p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648213558/myportfolioblogproject/iusekev1neab4oqs1vr4.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>1. Stack</em></strong></p><p>LIFO : Last In First Out</p><p>함수의 실행 순서를 기억하고 마지막에 들어간 함수가 제일 먼저 실행된다.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>2. Queue</em></strong></p><p>FIFO : First In First Out</p><p>Stack에서 쌓이기 전 대기하고 있는 함수들의 장소.</p><p>task queue에 있는 함수들은 event loop가 한번에 하나 씩만 콜스택으로 가지고 오게 된다.</p><p>가지고 온 콜백함수가 끝나면, 다시 하나씩 들고와서 실행하게 된다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648213578/myportfolioblogproject/isiijwzznaggb0isfv1f.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>3. Event Loop</em></strong></p><p>계속 Queue와 Call stack을 돌면서 실행되어질 함수를 지속적으로 관찰한다.</p><p>만약, Call stack에 쌓여진 모든 함수가 실행되어 지면, Queue에서 대기하고 있던 함수를 Call stack으로 불러오는 역할을 수행함.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>4. Web APIs</em></strong></p><p>DOM API, setTimeout, setInterval, fetch, event listener</p><p>만약, 버튼에 클릭 이벤트를 등록해놓으면, 클릭이라는 이벤트가 발생하게 되면,</p><p>event loop는 우리가 등록한 클릭 이벤트 리스너의 콜백 함수를 Queue에 넣게 된다.</p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-03-23T04:47:28.865Z',
    updatedAt: '2022-03-25T13:06:47.037Z',
    __v: 0,
  },
  {
    _id: '623dc058738dcca69b6d60b3',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648213991/myportfolioblogproject/mnprm0l1uqoovva4i6ek.gif',
    title: '자바스크립트 엔진 동작 환경 및 원리 정리2',
    text: '<p><strong><em>1. Task Queue</em></strong></p><p>Web APIs에서 우리가 등록한 콜백함수를 특정한 이벤트가 발생했을때 Task Queue에 넣는 것임.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>2. Miscro Task Queue</em></strong></p><p>promise가 resolve() 되고나서 then()에 등록된 콜백함수가 대기하는 곳. Mutation observer라는 web APIs에 등록된 콜백 또한 대기.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>3. Render sequence</em></strong></p><p>브라우저 상에서 우리가 요소들을 움직이거나 애니메이션이 발생할 때 주기적으로 브라우저에 업데이트 할 때 화면에 업데이트 해주는 곳임.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>4. Event Loop의 순회 (밑의 GIF 이미지 참고)</em></strong></p><p>Event Loop가 계속 빠르게 돌다가 콜스택에서 수행하는 함수가 있다면 콜스택에서 끝날때까지 대기.</p><p>Render 쪽으로는 갈수도 있고 안 갈수도 있음. 1초 당 60fps (60개의 그림)을 보여주려고 노력함. (16.7ms마다 업데이트가 이뤄져야 함을 의미)</p><p>Event Loop는 한 바퀴 1ms 걸림. 그래서 한 바퀴 돌때마다 Render sequence 업데이트 할 필요는 없음. 어느 정도 시간이 있다가 업데이트가 이루어짐(보통 16.7ms).</p><p><br class="ProseMirror-trailingBreak"></p><p>Render sequence를 넘어가면 event loop는 micro task 큐안의 콜백함수들이 콜스택으로 모두 이동해서 없어질 때까지 그곳에서 대기한다.</p><p>(나중에 마이크로 태스큐 안에 들어오는 콜백까지 처리할 때까지 마이크로 태스크 큐에서 대기한다)</p><p><br class="ProseMirror-trailingBreak"></p><p>마이크로 태스크 큐가 텅텅비면 태스큐로 들어오고 한번에 하나의 콜백함수만 콜스택으로 호출하고,</p><p>콜스택으로 하나만 호출하고 콜스택에서 실행이 완료될 때까지 기다렸다가(콜스택에 하나만 호출!!) 실행이 완료되면,</p><p>다시 순회를 시작.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214009/myportfolioblogproject/ulamhiw3en4ekdzqgktn.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214025/myportfolioblogproject/sfqaiuusdsmgjp2y9gsw.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214039/myportfolioblogproject/ki82vnkaft8rqx9mqcfs.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214051/myportfolioblogproject/cntvgsqsntbbjfv8rquj.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214063/myportfolioblogproject/ghr961ghp3hareemytdf.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214073/myportfolioblogproject/ifcx8py23rlwxq8pqskw.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-03-25T13:15:04.941Z',
    updatedAt: '2022-03-25T13:15:04.941Z',
    __v: 0,
  },
  {
    _id: '623ebd5b25066ac1eb074c84',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648272334/myportfolioblogproject/ts2gcnhmrexysr8sy5v6.gif',
    title: '네트워크와 CORS (Feat. Socket.IO)',
    text: '<p><strong><em><span data-raw-html="span" style="color: #ab4642">1. 서버 출처(origin) 이란?</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>서버의 위치를 의미. 즉 아래와 같은 URL!</p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648313527/myportfolioblogproject/tpysgyudwvycd3pkaoyo.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>이때 출처란 Protocol과 Host (위의 그림에는 나와 있는 않는 port 번호까지 포함해서) 출처라고 하는 것이다.</p><p>출처 내에서 포트 번호가 생략이 가능한 이유는 각 웹에서 사용하는 HTTP, HTTPS 프로토콜의 기본 포트 번호가 정해져 있기 때문임.</p><p><br class="ProseMirror-trailingBreak"></p><p>원칙적으로는 SOPS(Same-Origin-Policy-Sharing) 정책임.</p><p>즉, 프론트엔드 서버 URL이 http://localhost:3000이고, 백엔드 서버 URL이 http:/localhost:8080에 띄어져 있다고 하면,</p><p>이때, 프론트 서버와 백엔드 서버 출처(origin)가 SOP(Same-Origin-Policy) 정책에 어긋나기 때문에 CORS 에러가 발생함.</p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648313541/myportfolioblogproject/htxfadou294uudd7yk3a.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>즉, CORS(교차 출처 리소스 공유) 라는 것은 브라우저에서 서버로 요청시, 추가 HTTP 헤더를 사용하여,</p><p>한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하는</p><p>브라우저 체제이다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="color: #ab4642">2. 교차 출처(CORS) 허용 헤더 추가</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>1. 클라이언트 사이드 브라우저에서 서버 리소스 요청 시</strong></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>*요청 header에 origin 추가해서 서버에 요청!</strong></p><p><br class="ProseMirror-trailingBreak"></p><p>Ex)</p><p>const response = await fetch(\'http:/localhost:8080/test\', {</p><p>method: "GET",</p><p>mode: "cors",</p><p>headers: {</p><p>"Content-Type": "application/json",</p><p>"Origin": "http://localhost:3000"</p><p>},</p><p>})</p><p>const data = await response.json();</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>*package.json에서 proxy 값을 설정하는 경우도 있다!</strong></p><p><br class="ProseMirror-trailingBreak"></p><p>{</p><p>"proxy": "http://localhost:3000/"</p><p>}</p><p><br class="ProseMirror-trailingBreak"></p><p><strong>2. 서버는 응답헤더에 Access-Control-Allow-Origin을 담아 클라이언트에 전달한다.</strong></p><p><br class="ProseMirror-trailingBreak"></p><p>Ex)</p><p>Access-Control-Allow-Origin 응답 헤더 설정</p><p>app.use((req, res, next) =&gt; {</p><p>res.header("Access-Control-Allow-Origin", "*"); // 모든 도메인 허용</p><p>res.header("Access-Control-Allow-Origin", "http://localhost:3000"); // 특정 도메인 허용</p><p>})</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>또는</p><p><br class="ProseMirror-trailingBreak"></p><p><strong>3. cors 모듈 사용해서 설정</strong></p><p><br class="ProseMirror-trailingBreak"></p><p>import express from \'express\'; import cors from \'cors\';</p><p><br class="ProseMirror-trailingBreak"></p><p><strong>* 모든 도메인 허용</strong></p><p><br class="ProseMirror-trailingBreak"></p><p>const app = express();</p><p>app.use(cors());</p><p>아무 옵션 없이 그냥 설정하면 모든 cross-origin에 대해서 요청 수용함.</p><p>그래서 특정 도메인, 요청만 해주는 것이 중요하다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>import express from \'express\';</p><p>import cors from \'cors\';</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>* 특정 도메인 허용</strong></p><p><br class="ProseMirror-trailingBreak"></p><p>const app = express();</p><p>const options = {</p><p>origin: "http://localhost:3000",</p><p>// credentials: true, // 만일 client 요청에 credentials: \'include\' 옵션이 추가 되었을 경우</p><p>optionsSuccessStatus: 200, // 응답 상태 200으로 설정</p><p>}</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>app.use(cors(options));</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>*특정 요청 허용</strong></p><p><br class="ProseMirror-trailingBreak"></p><p>app.use("http://localhost:3000/test", cors(), (req, res, next) =&gt; {</p><p>res.status(200).json(\'test code\');</p><p>})</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>3. 서버에서 리소스를 받은 클라이언트는 자신이 보냈던 요청 Origin과 서버가 보내준 Access-Control-Allow-Origin을 비교한다.</strong></p><p><br class="ProseMirror-trailingBreak"></p><p>이에 비교를 해서 동일하지않거나 유효하지 않다면 그 응답을 사용하지 않고 버리며 브라우저 상에서도 나타나지 않는다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>4. 리소스 img, video 태그에 crossOrigin="anonymous" 속성을 주어서 브라우저 상에 나타나게 한다.</strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="color: #ab4642">3. CORS 동작 방식</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648313552/myportfolioblogproject/yni6qtnfazlepk8sjsuj.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>1. 자바스크립트의 fetch API 를 통해서 브라우저에게 리소스를 받아오려고 한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>2. 브라우저는 서버로 예비요청을 먼저 보낸다.</p><p><br class="ProseMirror-trailingBreak"></p><p>3. 서버는 이 예비요청에 대한 응답으로 어떤 것을 허용하고 어떤 것을 금지하고 있는지에 대한 정보를 담아서 브라우저로 다시 보내준다.</p><p><br class="ProseMirror-trailingBreak"></p><p>4. 이후 브라우저는 보낸 요청과 서버가 응답해준 요청이 안전한지 확인해보고 본 요청을 보내게 된다.</p><p><br class="ProseMirror-trailingBreak"></p><p>5. 이후 서버가 본 요청에 대해서 응답을 하면 최종적으로 이 응답 데이터를 자바스크립트로 넘겨주게 된다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="color: #ab4642">4. 인증된 요청(Credentialed Request)</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>기존 예비요청에서 보안을 더 강화하고 싶을 때 사용한다. 기본적으로 브라우저가 제공하는 비동기 리소스 요청 API fetch API는 별도의 옵션 없이 브라우저의 쿠키 정보나 인증과 관련된 헤더를 함부로 요청에 담지 않는다.</p><p><br class="ProseMirror-trailingBreak"></p><p>그래서, 요청에 인증과 관련된 정보를 담을 수 있게 해주는 옵션이 credentials 옵션이다.</p><p>이 옵션에는 총 3가지가 있다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>* same-origin (기본값) - 같은 출처 간 요청에만 인증 정보를 담을 수 있다.</em></strong></p><p><strong><em>* include - 모든 요청에 인증 정보를 담을 수 있다.</em></strong></p><p><strong><em>* omit - 모든 요청에 인증 정보를 담지 않는다.</em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>Ex)</p><p>const response = await fetch(\'http:/localhost:8080/testUpdate\', {</p><p>method: "PUT",</p><p>mode: "cors",</p><p>credentials: \'include\',</p><p>headers: {</p><p>"Content-Type": "application/json",</p><p>"Origin": "http://localhost:3000"</p><p>},</p><p>})</p><p>const data = await response.json();</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>include와 같은 옵션을 사용하여 리소스 요청에 인증 정보가 포함된다면,</p><p>서버는 브라우저가 다른 출처 리소스 요청할 때 Access-Control-Allow-Origin 만 확인하는 것이 아니라,</p><p>다른 조건을 추가로 검사하게 된다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>만약 요청에 인증정보가 담겨있는 상태에서 다른 출처 리소스를 요청하게 된다면,</p><p>브라우저는 CORS 정책 위반 여부를 검사하는 툴에 다음 두가지 조건을 추가하게 됨.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>1. Access-Control-Allow-Origin 에는 모든 요청을 허용하는 * 를 사용할 수 없으며, 명시적인 URL을 써야만 한다.</p><p>2. 응답 헤더에는 반드시 Access-Controll-Allow-Credentials: true 가 존재해야함.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="color: #ab4642">5. Socket.IO 사용하기</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>Social-media 실시간 채팅을 구현하면서 사용했던 예제. socket 실시간 서버에 연결하고 유저가 접속하는 순간 socket 서버의 users 배열에 userId, socketId를 저장하고, 클라이언트 상에 메시지를 보내게 되면 (sendMessage 이벤트 emit을 통해서 (상대 receiver id 정보와 함께) ), 서버에서는 클라이언트의 상대 userId인 receiverId를 통해서 상대 socketId를 socket 서버에서 찾아서,</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648313587/myportfolioblogproject/zabwzlx3alizmy8rjvqr.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648313603/myportfolioblogproject/tci9hburmkdg2t13sqie.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">io.to(user.socketId).emit(\'getMessage\', {</span></em></strong></p><p>&nbsp; &nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">senderId,</span></em></strong></p><p>&nbsp; &nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">text,</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">});</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>상대 socketId 로 emit 하게 된다.</p><p>상대 클라이언트 상에서 getMessage를 통해서,</p><p>메시지를 실시간으로 받아온다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">import { Server } from \'socket.io\';</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">const io = new Server(8900, {</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">cors: {</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">origin: \'*\',</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">},</span></em></strong></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">});</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">let users = [];</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">const addUser = (userId, socketId) =&gt; {</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">!users.some((user) =&gt; user.userId === userId) &amp;&amp;</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">users.push({ userId, socketId });</span></em></strong></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">};</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">const removeUser = (socketId) =&gt; {</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">users = users.filter((user) =&gt; user.socketId !== socketId);</span></em></strong></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">};</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">const getUser = (userId) =&gt; {</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">return users.find((user) =&gt; user.userId === userId);</span></em></strong></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">};</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">io.on(\'connection\', (socket) =&gt; {</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">// when connect</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">console.log(\'A user connected!\');</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">// take userId and socketId from user</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">socket.on(\'addUser\', (userId) =&gt; {</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">addUser(userId, socket.id);</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">io.emit(\'getUsers\', users);</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">});</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">// send and get message</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">socket.on(\'sendMessage\', ({ senderId, receiverId, text }) =&gt; {</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">const user = getUser(receiverId);</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">console.log(user);</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">io.to(user.socketId).emit(\'getMessage\', {</span></em></strong></p><p>&nbsp; &nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">senderId,</span></em></strong></p><p>&nbsp; &nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">text,</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">});</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">});</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">socket.on(\'disconnect\', () =&gt; {</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">console.log(\'A user disconnected!\');</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">removeUser(socket.id);</span></em></strong></p><p>&nbsp; &nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">io.emit(\'getUsers\', users);</span></em></strong></p><p>&nbsp; <strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">});</span></em></strong></p><p><strong><em><span data-raw-html="span" style="margin: 0px; padding: 0px; box-sizing: border-box; list-style: none; transition: all 0.2s linear 0s; text-decoration: none; color: rgb(24, 24, 24);">});</span></em></strong></p>',
    catName: 'Node JS',
    author: 'lse126',
    createdAt: '2022-03-26T07:14:35.519Z',
    updatedAt: '2022-03-26T16:53:59.886Z',
    __v: 0,
  },
  {
    _id: '623f49d7952fca4cbf91c4da',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314125/myportfolioblogproject/wnshoduuivfhmtlpexwg.gif',
    title: 'MySQL 설치 및 설정',
    text: '<p><strong><em><span style="color: #ab4642">1. MySQL 다운로드 센터에 가서 Installer 설치</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314150/myportfolioblogproject/puin70jdc90vgb3ijzfh.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">2. 해당 링크로 가서 아래 파일을 다운로드!</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314163/myportfolioblogproject/cpwru0ttdtpepzhd0of6.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">3. 로그인 하지 말고 그냥 다운로드 페이지로 넘어감!</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314173/myportfolioblogproject/hoxeeqrelhffh6yjzrmh.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">4. 잘은 몰라서 일단 개발자 툴로 전체 프로그램 설치</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314186/myportfolioblogproject/pvv3fyq6zizabupvbdag.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">5. Excute 버튼을 눌러 설치 진행</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314200/myportfolioblogproject/xnrb63fh2uuqsamqjtam.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">6. Excute 버튼을 누르기 전에 위에 나오는 필요한 요소 설치하기</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314212/myportfolioblogproject/bfnusgdlwrkkvb3oudk3.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">7. Excute 버튼을 누르고 설치 진행!</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314224/myportfolioblogproject/vpjpohsa6jvfkfxk68hw.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">8. 특별히 설정은 안하고 기본 설정으로 진행!</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314238/myportfolioblogproject/quitwurr0ncimqhopcqs.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314250/myportfolioblogproject/jjnaqtv82mybennsrfn7.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">9. 기본 default id 는 root 유저 비밀번호 반드시 기억해두기!!!!  </span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314266/myportfolioblogproject/gzm2uxooevmwdyk2nip0.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314275/myportfolioblogproject/rccypznbr6eszabibkz5.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">10. 아까 설정한  아이디와 비밀번호로 db 연결 test!!  </span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314285/myportfolioblogproject/utetfcyxpe52mus7lsta.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314294/myportfolioblogproject/bjnfdjtmrzveibkfacue.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">11. 설치 완료!!  </span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314303/myportfolioblogproject/hhsrpiisobp9r9vugvdx.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p>',
    catName: 'Node JS',
    author: 'lse126',
    createdAt: '2022-03-26T17:13:59.179Z',
    updatedAt: '2022-03-26T17:13:59.179Z',
    __v: 0,
  },
  {
    _id: '6240347098a87052ccda562f',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648367741/myportfolioblogproject/u2ie0l3avbjfkhjhqgek.gif',
    title: 'Database (MySQL, MongoDB)',
    text: '<p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648376921/myportfolioblogproject/xvxnxvnlzeeejnwugdac.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648376931/myportfolioblogproject/vogwvi9m4inqfyt7dq7h.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648376939/myportfolioblogproject/zpgtdcc375bsdqsdiinz.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><a href="https://github.com/BVBFD/Blog-project/tree/main/server">Mongoose 참고 코드 (블로그 프로젝트)</a></p><p><br class="ProseMirror-trailingBreak"></p><p><a href="https://github.com/BVBFD/Mr.Lee-Chatting-Box">MonogoDB, Mongoose, MySQL, Sequelize 참고 코드 (채팅 사이트 프로젝트)</a></p>',
    catName: 'Node JS',
    author: 'lse126',
    createdAt: '2022-03-27T09:54:56.597Z',
    updatedAt: '2022-03-27T10:32:01.232Z',
    __v: 0,
  },
  {
    _id: '62451d8aec99bcd2151e4ab6',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648692562/myportfolioblogproject/dgtziindvhi6coe3p6k8.gif',
    title: 'XSS, CSRF 공격 및 대응 방안(백엔드 기본 보안)',
    text: '<p><strong><em><span style="color: #ab4642">1. XSS : Cross-Site Scripting</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694877/myportfolioblogproject/jnxm1th7vgbzp8rkwdun.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>공격대상: Client</p><p><br class="ProseMirror-trailingBreak"></p><p><span>공격자는 대상 사용자의 브라우저 내에서 임의의 JavaScript를 주입해서 실행</span></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">2. CSRF : Cross-Site Request Forgery</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694892/myportfolioblogproject/wec1pe12892kqmhazad7.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><span style="color: rgb(51, 51, 51);">공격대상: Client(Client의 권한으로 Server에 요청)</span></p><p><br class="ProseMirror-trailingBreak"></p><p><span>공격자는 피해자가 의도하지 않은 작업을 수행하도록 유도</span></p><p><br class="ProseMirror-trailingBreak"></p><p>예를 들면, 일단 해커가 조작된 HTTP 요청 정보를 담고 있는 게시물을 DB에 등록하게 되고,</p><p>허가된 사용자가 웹사이트에 로그인한 상태에서 조작된 HTTP 요청 코드가 삽입된</p><p>이 게시물을 열면, 이 조작된 HTTP 요청은 허가된 client로부터 보내졌다고 server가 판단,</p><p>허가된 사용자의 의도와는 다르게 CRUD 기능이 이루어지게 됨.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">3. XSS, CSRF 공격 대응 방안</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>*App.js</strong></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694960/myportfolioblogproject/lipikvgj6xnplvvgb8g8.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>cookie-parser 라이브러리를 사용하여 최상위 서버 컴포넌트에 설치 및 실행. </p><p>XSS 대응, CSRF 대응 토큰을 생성하는 Request URL 생성</p><p><br class="ProseMirror-trailingBreak"></p><p>XSS 대응 토큰은 bcrypt 라이브러리를 통해서 강력한 비밀번호를 매번 hash해서 생성.</p><p>하지만, XSS 공격 특성상 자바스크립트로 cookie 토큰 탈취되는 것을 방지하기 위해,</p><p><strong><em><span style="color: #ab4642">httpOnly: true 옵션을 반드시 줘서, token 을 생성.</span></em></strong> ( <strong><em><span style="color: #ab4642">res.cookie() </span></em></strong><span style="color: #181818">) </span></p><p>client 상에서 자바스크립트로 cookie에 저장된 XSS 대응 토큰 탈취를 막는다.</p><p><br class="ProseMirror-trailingBreak"></p><p>CSRF 대응 토큰은 bcrypt 라이브러리를 통해서 강력한 비밀번호를 매번 hash해서 생성.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>*XSS 공경 대응 코드 (XSS 토큰)</strong></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694971/myportfolioblogproject/sazwxe77ab8goba5e3jg.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>단, XSS 공격 특성상 Client에 악성 자바스크립트 코드를 주입해서, </p><p>조작된 http 요청을 보내게 되고 피해를 입게 됨으로,</p><p>client 로 부터 오는 모든 조작 http 요청에 <strong><em><span style="color: #ab4642">credential:  \'include\'  옵션을 주고,</span></em></strong></p><p><strong><em><span style="color: #ab4642">서버는 credential:  true (cors 모듈 사용시) or Access-Control-Allow-Credentials: true,</span></em></strong></p><p>설정을 해서, cors origin 검사 뿐만 아니라, cookie 역시 http 요청에 자동으로 담아서 보낸다.</p><p><br class="ProseMirror-trailingBreak"></p><p>그리고 위와 같이 http 조작 요청에 담겨진 cookie xss 대응용 토큰을 받아서,</p><p>bcrypt 라이브러리를 통해서 유효성 검사를 하고,</p><p>통과를 하면 next() 다음 미들웨어로 넘기고,</p><p>아니면 에러처리!!</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>*CSRF 공경 대응 코드 (CSRF 토큰)</strong></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694978/myportfolioblogproject/rbvbuis9gvddxmpdmrru.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>CSRF 대응용 토큰 또한 XSS 대응용 토큰처럼 전반적으로 대응방식은 똑같지만,</p><p>Client 를 사용자가 처음 실행했을때, 그 때 애초에 csrf 대응용 토큰을 만들어서 client로 보내고,</p><p>client는 이 csrf 토큰을 cookie나 로컬스토리지, 세션이 아니라,<span style="color: #ab4642"> </span><strong><em><span style="color: #ab4642">각자 컴퓨터의 메모리 상에 보관해야한다.</span></em></strong></p><p>(React로 예를 들면 useState의 변수에 저장!!!)</p><p><br class="ProseMirror-trailingBreak"></p><p>이를 통해서 사용자의 http 조작 요청 사항에 대해서만 headers에 위와 같이 csrf2Token이라는 이름으로,</p><p>headers에 csrf 대응용 토큰을 담아서 보내게 되고, 이를 xss 대응용 토큰처럼 유효성 검사를 실시한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>해커의 조작된 http 요청 사항에는 header 안에 csrf 대응용 토큰이 없어서 유효성 검사에서 에러처리 나겠지만,</p><p>사용자의 http 요청 사항은 통과할 수 있게된다.</p><p><br class="ProseMirror-trailingBreak"></p><p>쿠키나 세션, 로컬스토리지에 저장되어 있는게 아니라 사용자의 메모리에 저장되어 있기 때문에,</p><p>해커가 이를 알 수 있는 방법 또한 없게 된다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694987/myportfolioblogproject/c5wda8tiaqxr3um5zdx4.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>미들웨어를 위와 같이 구성하여, 유효성 검사를 실시하고,</p><p>CRUD 기능을 서버상에서 실행한다.</p>',
    catName: 'Node JS',
    author: 'lse126',
    createdAt: '2022-03-31T03:18:34.778Z',
    updatedAt: '2022-03-31T03:18:34.778Z',
    __v: 0,
  },
  {
    _id: '6246e57228855e739d93ad13',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648813411/myportfolioblogproject/v37oiyihhgirqs6brdaf.gif',
    title: 'React Hooks 완벽 정복!!',
    text: '<h3><span style="color: #ab4642">1. 리액트 프로젝트 생성하기</span></h3><p><br class="ProseMirror-trailingBreak"></p><div data-language="HTTP" class="toastui-editor-ww-code-block"><pre><code data-language="HTTP">$ yarn create react-app &lt;project-name&gt;</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3><span style="color: #ab4642">2. useState()</span></h3><p><br class="ProseMirror-trailingBreak"></p><div data-language="JS" class="toastui-editor-ww-code-block"><pre><code data-language="JS">import React, { useState } from \'react\';\n\nconst Counter = () =&gt; {\n    const [value, setValue] = useState(0);\n    return (\n       &lt;div&gt;      \n          &lt;p&gt;\n           현재 카운터 값은 &lt;b&gt;{value}&lt;/b&gt; 입니다.\n          &lt;/p&gt;\n          &lt;button onClick={() =&gt; setValue(value + 1)}&gt;+1&lt;/button&gt;\n          &lt;button onClick={() =&gt; setValue(value - 1)}&gt;-1&lt;/button&gt;\n       &lt;/div&gt;\n    );\n}\n\nexport default Counter;</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3><span style="color: #ab4642">3. useEffect()</span></h3><p><br class="ProseMirror-trailingBreak"></p><div data-language="JS" class="toastui-editor-ww-code-block"><pre><code data-language="JS">import React, { useState, useEffect } from \'react\';\n\nconst Name = () =&gt; {\n    const [name, setName] = useState("Mr.Lee Seong Eun");\n    \n    useEffect(() =&gt; {\n        console.log("이름 렌더링 완료!!");\n        return () =&gt; setName("");\n    }, [name]);\n\n    return (\n        &lt;div&gt;\n            &lt;span&gt;Name: {name}&lt;/span&gt;\n        &lt;/div&gt;\n    );\n}</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p>deps 배열 안에 아무것도 없다면 컴포넌트가 렌더링될 때마다 실행이 되어지고,</p><p>만약에 변수가 있다면, 컴포넌트가 렌더링 되고 난 직후 뿐만 아니라,</p><p>deps 배열 안의 변수가 업데이트 될 때마다 다시 렌더링 됨.</p><p><br class="ProseMirror-trailingBreak"></p><p>useEffect 안의 return () =&gt; {}  콜백 함수의 경우는 clean up 함수임.</p><p>deps가 비어 있는 경우 컴포넌트가 사라질때 clean up 콜백함수가 호출.</p><p>deps에 변수가 있다면 그 변수가 업데이트 되기 직전,</p><p>clean up 함수를 호출!! </p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3><span style="color: #ab4642">3. useContext, useReducer</span></h3><p><br class="ProseMirror-trailingBreak"></p><h5>*Context.js</h5><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><div data-language="JS" class="toastui-editor-ww-code-block"><pre><code data-language="JS">import { createContext, useEffect, useReducer } from "react";\n\nconst Reducer = (state, action) =&gt; {  \n    switch (action.type) {    \n        case "LOGIN_SUCCESS":      \n            return {        \n                id: action.payload.userId,        \n                // token: action.payload.token,        \n                editable: action.payload.editable,        \n                profilePic: action.payload.profilePic,        \n                email: action.payload.email,      \n            };\n\n        case "LOGOUT":      \n            return {        \n                id: null,        \n                // token: null,        \n                editable: null,        \n                profilePic: null,        \n                email: null,      \n            };\n\n        default:      \n            return state;  \n      }\n};\n\nconst initialLoginData = {  \n    id: JSON.parse(localStorage.getItem("id")) || null,  \n    // token: JSON.parse(localStorage.getItem("token")) || null,  \n    editable: localStorage.getItem("editable") || null,  \n    profilePic: localStorage.getItem("profilePic") || null,  \n    email: localStorage.getItem("email") || null,\n};\n\nexport const Context = createContext(initialLoginData);\n\nexport const ContextProvider = ({ children }) =&gt; {  \n    const [state, dispatch] = useReducer(Reducer, initialLoginData);\n    \n    useEffect(() =&gt; {    \n        localStorage.setItem("id", JSON.stringify(state.id));    \n        // localStorage.setItem("token", JSON.stringify(state.token));    \n        localStorage.setItem("editable", state.editable);    \n        localStorage.setItem("profilePic", state.profilePic);    \n        localStorage.setItem("email", state.email);        \n    }, [state.id]);\n\n  return (    \n    &lt;Context.Provider      \n        value={{        \n            id: state.id,        \n            // token: state.token,        \n            editable: state.editable,        \n            profilePic: state.profilePic,        \n            dispatch,      \n            }}    \n    &gt;      \n      {children}    \n    &lt;/Context.Provider&gt;  \n  );\n};</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h5>*index.js</h5><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><div data-language="JS" class="toastui-editor-ww-code-block"><pre><code data-language="JS">import React from "react";\nimport ReactDOM from "react-dom";\nimport "./index.css";\nimport App from "./App";\nimport { BrowserRouter } from "react-router-dom";\nimport { ContextProvider } from "./context/context";\n\nReactDOM.render(  \n    &lt;React.StrictMode&gt;    \n        &lt;BrowserRouter&gt;      \n            &lt;ContextProvider&gt;        \n                &lt;App /&gt;      \n            &lt;/ContextProvider&gt;    \n        &lt;/BrowserRouter&gt;  \n    &lt;/React.StrictMode&gt;,  \n    document.getElementById("root")\n);</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h5>*Login.jsx</h5><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><div data-language="JS" class="toastui-editor-ww-code-block"><pre><code data-language="JS">.......\n\nconst res = await axiosInstance.post(`/loginDatas/login`, {        \n    userId: idRef.current.value,        \n    password: pwdRef.current.value,      \n});      \n\ndispatch({        \n    type: "LOGIN_SUCCESS",        \n    payload: {          \n        userId: res.data.sendLoginData.userId,          \n        // token: res.data.token,          \n        profilePic: res.data.sendLoginData.profilePic,          \n        editable: res.data.sendLoginData.editable,          \n        email: res.data.sendLoginData.email,        \n      },      \n    });    \n  } catch (err) {      \n     window.alert(err);    \n  }    \n  setLoginSuccess(true);  \n};\n\nloginSuccess &amp;&amp; window.location.replace("/");\n\n.......</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p>전역적으로 사용하는 props들은 여러 컴포넌트로 2중 3중으로 넘겨주는 것 없이, </p><p>useContext API hook 으로  위와 같이 관리해주는 것이 바람직하다. </p><p><br class="ProseMirror-trailingBreak"></p><p>useReducer 는 useState 보다 컴포넌트에서 더 다양한 상황에 따라 다양한 상태를 다른 값으로 업데이트해주고 싶을 때 사용하는 Hook 입니다. </p><p>Reducer는 현재 상태와, 업데이트를 위해 필요한 정보를 담은 액션(action) 값을 전달 받아 새로운 상태를 반환하는 함수입니다. </p><p>위의 예제에서는 액션 값(type, payload)을 받아 올 수 있는 dispatch 변수를 각 컴포넌트로 prop으로 전달하여,</p><p>각 컴포넌트에서 액션 값을 받으면 그에 맞는 type에 따라,</p><p>리턴된 payload 값으로 state 상태가 업데이트 된다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3><span style="color: #ab4642">4. useImperativeHandle, useCallback, useMemo</span></h3><p><br class="ProseMirror-trailingBreak"></p><div data-language="JS" class="toastui-editor-ww-code-block"><pre><code data-language="JS">import React, {&nbsp; \n    createContext,&nbsp; \n    useCallback,&nbsp; \n    useContext,&nbsp; \n    useEffect,&nbsp; \n    useImperativeHandle,&nbsp; \n    useMemo,&nbsp; \n    useRef,&nbsp; \n    useState,\n} from \'react\';\nimport Header from \'../components/Header\';\nimport Login from \'../pages/Login\';\n\nconst AuthContext = createContext({});\n\nconst tokenRef = useRef();\nconst csrfRef = useRef();\n// 상위 컴포넌트\n\nexport const AuthProvider = (props) =&gt; {&nbsp; \n    const [user, setUser] = useState(undefined);&nbsp; \n    const [csrfToken, setCsrfToken] = useState(undefined);\n\n    useImperativeHandle(tokenRef, () =&gt; (user ? user.token : undefined));\n    useImperativeHandle(csrfRef, () =&gt; csrfToken);\n    // 즉, 상위 컴포넌트에서 useRef 훅으로 생성한 객체의 current 프로퍼티는\n    // 하위 컴포넌트에서 호출한 useImperative 훅의 두 번째 인수로 전달된\n    // 콜백 함수의 반환값으로 작성한 객체와 연결됩니다.\n\nuseEffect(() =&gt; {&nbsp; &nbsp; \n    authService.csrfToken().then(setCsrfToken).catch(console.error);&nbsp; \n}, [authService]);\n\nuseEffect(() =&gt; {&nbsp; &nbsp; \n    authService.me().then(setUser).catch(console.error);&nbsp; \n}, [authService]);\n\nconst signUp = useCallback(&nbsp; &nbsp; \n    async (username, password, name, email, url) =&gt;&nbsp; &nbsp; &nbsp; \n        authService&nbsp; &nbsp; &nbsp; &nbsp; \n            .signUp(username, password, name, email, url)&nbsp; &nbsp; &nbsp; &nbsp; \n            .then((user) =&gt; setUser(user)),&nbsp; &nbsp; \n    [authService]&nbsp; \n);\n\nconst logIn = useCallback(\n   async (username, password) =&gt;\n      authService.login(username, password).then((user) =&gt; setUser(user)),\n   [authService]\n);\n// 특정함수를 메모리에 메모이제이션 해두고 재사용하고 싶을때\n// useCallback을 사용\n\nconst logout = useCallback(\n  async () =&gt; authService.logout().then(() =&gt; setUser(undefined)),\n  [authService]\n);\n\nconst context = useMemo(\n  () =&gt; ({ user, signUp, logIn, logout }),\n  [user, signUp, logIn, logout]\n);\n\n// 특정 값을 메모리에 메모이제이션 해두고 재사용하고 싶을 때\n// useMemo 사용\n// [] 안의 값이 바뀔 때만 첫번쨰 인자 콜백함수의\n// return 인자(콜백 함수 일지도 or 단수 변수 일지도)를\n// 호출 지금처럼 재계산하는\n// 함수가 아주 간단하다면 성능상의 차이는\n// 아주 미미하겠지만 만약 재계산하는 로직이 복잡하다면\n// 불필요하게 비싼 계산을 하는 것을 막을 수 있다.\n\nreturn (\n  &lt;AuthContext.Provider value={context}&gt;\n    &lt;div className=\'app\'&gt;\n      &lt;Header /&gt;\n      &lt;Login /&gt;\n    &lt;/div&gt;\n  &lt;/AuthContext.Provider&gt;\n );\n};\n\nexport default AuthContext;\nexport const fetchToken = () =&gt; tokenRef.current;\nexport const fetchCsrfToken = () =&gt; csrfRef.current;\nexport const useAuth = () =&gt; useContext(AuthContext);</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h3><span style="color: #ab4642">5.  Memo() 로  렌더링 성능 최적화</span></h3><p><br class="ProseMirror-trailingBreak"></p><p>React가 렌더링을 하는 조건은 3가지이다.</p><p><br class="ProseMirror-trailingBreak"></p><p>* 자신의 state가 변경될 때</p><p>* 부모 컴포넌트로부터 전달받은 props가 변경될 때</p><p>* 부모 컴포넌트가 리렌더링 될 때</p><p><br class="ProseMirror-trailingBreak"></p><p>리액트 memo() 는 기본적으로 props만 비교를 하는 <strong><span style="color: #ab4642">얕은 비교</span></strong>를 한다.</p><p>props의 변수가 변화하지 않았다면 리렌더링 방지!!</p><p><br class="ProseMirror-trailingBreak"></p><p>하지만 props 변수 내부 값을 확인하는 깊은 비교가 아니고,</p><p>단지 props 변수 명시적 객체만 (내부 값이 아닌) 확인..</p><p><br class="ProseMirror-trailingBreak"></p><div data-language="JS" class="toastui-editor-ww-code-block"><pre><code data-language="JS">const MyComponent = React.memo(function MyComponent(props) {\n  /* props를 사용하여 렌더링 */\n});</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p>이를 방지하기위해선<span style="color: #ab4642"> </span><strong><span style="color: #ab4642">깊은비교</span></strong>를 하자고 하면,</p><p>memo() 두 번째 인자에 props 내부값 변화 확인하는 콜백함수를 넣어준다.  </p><p><br class="ProseMirror-trailingBreak"></p><div data-language="JS" class="toastui-editor-ww-code-block"><pre><code data-language="JS">function areEqual(prevProps, nextProps) {\n  /*\n  nextProp가 prevProps와 동일한 값을 가지면 true를 반환하고, 그렇지 않다면 false를 반환\n  */\n}\n\nexport default React.memo(MyComponent, areEqual);</code></pre></div><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p>',
    catName: 'React',
    author: 'lse126',
    createdAt: '2022-04-01T11:43:46.727Z',
    updatedAt: '2022-04-01T11:43:46.727Z',
    __v: 0,
  },
  { title: '안녕 나는 테스트 중이야 1' },
  { title: '안녕 나는 테스트 중이야 2' },
  { title: '안녕 나는 테스트 중이야 3' },
  { title: '안녕 나는 테스트 중이야 4' },
  { title: '안녕 나는 테스트 중이야 5' },
  { title: '안녕 나는 테스트 중이야 6' },
  { title: '안녕 나는 테스트 중이야 7' },
  { title: '안녕 나는 테스트 중이야 8' },
  { title: '안녕 나는 테스트 중이야 9' },
  { title: '안녕 나는 테스트 중이야 10' },
  { title: '안녕 나는 테스트 중이야 11' },
  { title: '안녕 나는 테스트 중이야 12' },
  { title: '안녕 나는 테스트 중이야 13' },
  { title: '안녕 나는 테스트 중이야 14' },
  { title: '안녕 나는 테스트 중이야 15' },
  { title: '안녕 나는 테스트 중이야 16' },
  { title: '안녕 나는 테스트 중이야 17' },
  { title: '안녕 나는 테스트 중이야 18' },
  { title: '안녕 나는 테스트 중이야 19' },
  { title: '안녕 나는 테스트 중이야 20' },
  { title: '안녕 나는 테스트 중이야 21' },
  { title: '안녕 나는 테스트 중이야 22' },
  { title: '안녕 나는 테스트 중이야 23' },
  { title: '안녕 나는 테스트 중이야 24' },
  { title: '안녕 나는 테스트 중이야 25' },
  { title: '안녕 나는 테스트 중이야 26' },
  { title: '안녕 나는 테스트 중이야 27' },
  { title: '안녕 나는 테스트 중이야 28' },
  { title: '안녕 나는 테스트 중이야 29' },
  { title: '안녕 나는 테스트 중이야 30' },
  { title: '안녕 나는 테스트 중이야 31' },
  { title: '안녕 나는 테스트 중이야 32' },
  { title: '안녕 나는 테스트 중이야 33' },
  { title: '안녕 나는 테스트 중이야 34' },
];

export default dummyDatas;
